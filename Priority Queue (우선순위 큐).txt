Priority Queue (우선순위 큐)



#0 정의 (Define)
우선순위 큐는 우선순위가 가장 높은 데이터를 가장 먼저 삭제하는 자료구조 
데이터를 우선순위에 따라 처리하고 싶은 때 사용
Default 값은 DESC 입니다.




#1 구현방법
1) 단순히 리스트를 이용하는 방법	
	>> 시간 복잡도 : 삽입 : O(1), 삭제 : O(N)
	>> 삭제할 때 우선순위 높은 애를 찾아서 삭제시 오래 걸려
2) 힙(heap)을 이용하는 방법	
	>>  시간 복잡도 : 삽입 : O(logN), 삭제 : O(logN)



#2 힙(Heap)의 특징
- 힙은 완전 이진 트리 자료구조(Complete Binart Tree)의 일종
- 힙에서는 항상 루트 노트(root node)를 제거함
- 최소 힙 (mid heap)
	루트 노드가 가장 작은 값을 가짐
- 최대 힙 (max heap)
	루트 노드가 가장 큰 값을 가짐
※ 트리에서 맨 위가 루트인 거 알지 ? 밑으로 가면 가지(sub tree)잖아 ㅇㅇ
※ 완전 이진 트리란 루트 노드부터 시작해서 왼쪽 자식, 오른쪽 자식 순으로 삽입되는 구조



#3 Header
#include <queue> 에 포함되어 있음



#4 선언과 사용 
priority_queue<int> pq;
pq.push();
pq.top(); << 우선순위 가장 높은 거 (heap이 트리 구조라 top에 있는 거 꺼내는거야 )
pq.pop();



#5 활용

※ 여기서 중요한 거 두번째 인스턴스가 기준이라고 생각해야 돼 
	// ex) bool operator()(int a, int b) << 이거면 b가 기준이야
	// return a < b; 이거면 높은게 top(우선순위 높은 거) 에 있는거지

1) 오름차순으로 해보기 (ASC)
priority_queue<int, vector<int>, greater<int>> pq;
// int 형에 vector 라는 컨테이너로 정렬하는데 greater ASC 으로 하겠다 (sort랑 반대)
// default 는 less<int> 야 근데 default라 안적어도 돼

2) 우선순위를 내가 만들어보기
priority_queue<int, vector<int>, compare> pq;
// compare 는 내가 정한 이름임 sort compare 처럼
// 구조체로 만들어야 돼
typedef struct{
	bool operator()(int a, int b){
		return a > b;
	}
}compare;
// string 으로 해서 string.length() 로 비교하는 것도 가능하고 다양함
※ 여기서 주의할 점 트리구조라서 그런지 위 처럼 쓰면 오름차순으로 정렬됨 ;;

3) 더 나아가
구조체 타입도 비교하고 정렬할 수 있음
typedef struct {
	int y, x;
}node;
typedef struct {
	bool operator()(node a, node b){
		return a.y < b.y;
	}
}compare;
priority_queue<node, vector<node>, compare> pq;
※ 여기서 주의 할 점 비교하는 구조체(compare)가 자료 담기용 구조체(node) 보다 위에 있으면
	절차지향 언어이기 때문에 당연히 오류가 남 

4) pair 사용
priority_queue<pair<int, int>> pq;
pq.push({ 1, 2 });
pq.top().first;
pq.top().second;





















