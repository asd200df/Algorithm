# 주의 사항
compare 함수 쓸 때
bool compare (메소드 적고) { }
호출시 sort(배열, 배열 + N, compare); 
compare 함수에서 if() return true; or return A.t > B.t 뭐 이런식으로 하잖아
그 떄 if 다음 else if 다음 else 에 적을 거 없어도 else 적어야 오류 안난다 else return false 라도 적어 





# 일반 배열 Sort [1] ASC : 오름차순
int arr
sort(arr, arr + N); 	 
// sort(시작주소, 마지막주소 + 1); 
// N이 보통 배열 인덱스 마지막 + 1 이니까 시작주소 + N 한거야





# 일반 배열 Sort [2] DESC : 내림차순
int arr
sort(arr, arr + N, greater<int>()); 	 
// sort(시작주소, 마지막주소 + 1, greater<int>()); 





# 기본 Vector Sort 예시

#include <iostream>
#include <vector>
#include <algorithm> //sort 함수를 사용하기 위해 추가해야 함

using namespace std;

int main() {
  vector<int> v = {5, 2, 9, 3, 1, 6, 8, 4, 7}; //임의의 벡터 생성

  sort(v.begin(), v.end()); //벡터 요소 정렬

  for (int i = 0; i < v.size(); i++) { //정렬된 벡터 출력
    cout << v[i] << " ";
  }
  cout << endl;

  return 0;
}





# 심화 vector<struct> sort 예시
# 여기서 vector struct 의 경우는 sort 할 때 비교함수가 있어야 가능함 compare

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Person {
  string name;
  int age;
};

bool compare(Person a, Person b) {
  return a.age < b.age; //나이를 기준으로 오름차순으로 정렬
}

int main() {
  //임의의 벡터 생성
  vector<Person> people = { {"Alice", 25}, {"Bob", 18}, {"Charlie", 30}, {"David", 22} }; 

  sort(people.begin(), people.end(), compare); //구조체 요소 정렬

  for (int i = 0; i < people.size(); i++) { //정렬된 벡터 출력
    cout << people[i].name << " " << people[i].age << endl;
  }

  return 0;
}



