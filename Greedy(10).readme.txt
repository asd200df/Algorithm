알고리즘탑 - Greedy - 전구 켜기 


[문제] 
하나의 버튼에 여러 개의 전구 연결
버튼 누를 때 마다 전구가 토글 됨 {꺼짐(0) / 켜짐(1)}
모든 전구를 켜기 위해 최소 몇 번의 버튼을 눌러야 하는지 구하는
*만약 전구를 모두 켤 수 없는 경우는 -1을 출력


설계[1] (실패)
0 input 받기 (int, int[], vector, result = -1;로 시작)
1 DFS(), isValid() func 맹글기
2 DFS(){
	if( isValid ) { minimum update ... }
	for(i ~ vector.size()) {  }
  }
3 map 바꾸고 back tracking 
5 main 에서 result 출력하면 minimum 갱신 안되었으면 -1 출력 될테고
	갱신 되어 있으면 갱신 된 minimum 값 출력하고 end



설계[2]
0 input 받기 (int, int[], vector, result = -1;로 시작)
1 func 맹글기
	DFS(), isValid(), BackTracking(), MapChange(), solve() 
2 solve() call
	for(int i = 1(최소 갯수부터) ~ vector.size()(최대 갯수까지))
		{ DFS(i:limit 보내줌) }
3 DFS() {
	
	if(limit == 현재 카운트) 
		mapchange(chn) func call
		isValid() func call
		true { minimum update } 
		false { BT() call & return; }
	for(int chn 0 ~ vector.size();)
			DFS(chn:버튼 어떤 거 누를꺼야, 
				start point  + 1)
4 main 에서 result 출력하면 minimum 갱신 안되었으면 -1 출력 될테고
	갱신 되어 있으면 갱신 된 minimum 값 출력하고 end


설계[3]
0 input 받기 (int, int[], vector, result = -1;로 시작)
1 func 맹글기
	DFS() 
	



[input]
// 전구 갯수, 버튼 갯수, 버튼 하나당 연결된 전구수
// 초기 전구 상태
// 1번 버튼과 연결된 전구 번호
// ...
5 3 2
0 0 0 1 0
1 3
2 4
4 5

[output]
3


btn = 0 = button = 
v[0].size() = 2
v[button][i] = v[0][0] = 1 = tmp
arr[tmp] = arr[1] = 0[index 1]











