# 일반 배열 Sort
int arr
sort(arr, arr + N);
// sort(시작주소, 마지막주소 + 1);




# 기본 Sort 예시

#include <iostream>
#include <vector>
#include <algorithm> //sort 함수를 사용하기 위해 추가해야 함

using namespace std;

int main() {
  vector<int> v = {5, 2, 9, 3, 1, 6, 8, 4, 7}; //임의의 벡터 생성

  sort(v.begin(), v.end()); //벡터 요소 정렬

  for (int i = 0; i < v.size(); i++) { //정렬된 벡터 출력
    cout << v[i] << " ";
  }
  cout << endl;

  return 0;
}







# vector<struct> sort 예시
# 여기서 vector struct 의 경우는 sort 할 때 비교함수가 있어야 가능함 compare

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Person {
  string name;
  int age;
};

bool compare(Person a, Person b) {
  return a.age < b.age; //나이를 기준으로 오름차순으로 정렬
}

int main() {
  //임의의 벡터 생성
  vector<Person> people = { {"Alice", 25}, {"Bob", 18}, {"Charlie", 30}, {"David", 22} }; 

  sort(people.begin(), people.end(), compare); //구조체 요소 정렬

  for (int i = 0; i < people.size(); i++) { //정렬된 벡터 출력
    cout << people[i].name << " " << people[i].age << endl;
  }

  return 0;
}



